{% comment %}
  Renders custom product form with quantity selector and add to cart button
  
  Accepts:
  - product: {Object} Product object
  - block: {Object} Block object (optional)
  - section: {Object} Section object
  
  Usage:
  {% render 'product-form-custom', product: product, block: block, section: section %}
{% endcomment %}

<div class="product-form" {{ block.shopify_attributes }}>
  <form
    action="{{ routes.cart_add_url }}"
    method="post"
    enctype="multipart/form-data"
    class="flex gap-4 cart-form"
  >
    <input
      type="hidden"
      name="id"
      value="{{ product.selected_or_first_available_variant.id }}"
      id="product-variant-id"
    >

    <!-- Quantity Selector -->
    <div class="flex items-center border-2 border-border rounded-lg">
      <button type="button" class="quantity-decrease p-4 hover:bg-primary/10 transition-colors">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-minus h-4 w-4"
        >
          <path d="M5 12h14"></path>
        </svg>
      </button>
      <input
        type="number"
        name="quantity"
        value="1"
        min="1"
        class="quantity-input w-16 text-center font-bold text-foreground bg-transparent border-none focus:outline-none"
      >
      <button type="button" class="quantity-increase p-4 hover:bg-primary/10 transition-colors">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-plus h-4 w-4"
        >
          <path d="M5 12h14"></path>
        </svg>
      </button>
    </div>

    <!-- Add to Cart Button -->
    <button
      type="submit"
      name="add"
      class="flex-1 bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-4 px-8 rounded-lg transition-all duration-200 flex items-center justify-center gap-2 relative overflow-hidden"
      {% unless product.available %}disabled{% endunless %}
    >
      <span class="btn-text">
        {% if product.available %}
          ADD TO CART
        {% else %}
          SOLD OUT
        {% endif %}
      </span>
      
      <!-- Loading Spinner -->
      <div class="loading__spinner hidden">
        <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </div>
    </button>
  </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Handle cart form submissions using CartManager
  const cartForms = document.querySelectorAll('.cart-form');
  
  cartForms.forEach(form => {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const button = form.querySelector('button[type="submit"]');
      const btnTextSpan = button.querySelector('.btn-text');
      const spinner = button.querySelector('.loading__spinner');
      const originalText = btnTextSpan.textContent;
      
      // Show loading state
      if (btnTextSpan) btnTextSpan.textContent = 'ADDING...';
      if (spinner) spinner.classList.remove('hidden');
      button.disabled = true;
      
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const item = await response.json();
          
          // Show success state briefly
          if (btnTextSpan) btnTextSpan.textContent = 'ADDED!';
          if (spinner) spinner.classList.add('hidden');
          
          // Update cart using CartManager
          setTimeout(async () => {
            try {
              if (window.CartManager) {
                await window.CartManager.updateCart(true); // true = open drawer
              } else {
                // Fallback
                const cartResponse = await fetch('/cart.js');
                const cartData = await cartResponse.json();
                document.dispatchEvent(new CustomEvent('cart:updated', { 
                  detail: { cart: cartData } 
                }));
              }
            } catch (error) {
              console.error('Error updating cart:', error);
              document.dispatchEvent(new CustomEvent('cart:updated'));
            }
            
            // Reset button
            setTimeout(() => {
              if (btnTextSpan) btnTextSpan.textContent = originalText;
              if (spinner) spinner.classList.add('hidden');
              button.disabled = false;
            }, 1000);
          }, 500);
          
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        if (btnTextSpan) btnTextSpan.textContent = 'ERROR';
        if (spinner) spinner.classList.add('hidden');
        
        setTimeout(() => {
          if (btnTextSpan) btnTextSpan.textContent = originalText;
          button.disabled = false;
        }, 2000);
      }
    });
  });

  // Handle quantity controls
  const quantityInput = document.querySelector('.quantity-input');
  const quantityDecrease = document.querySelector('.quantity-decrease');
  const quantityIncrease = document.querySelector('.quantity-increase');

  if (quantityDecrease && quantityIncrease && quantityInput) {
    quantityDecrease.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });

    quantityIncrease.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = currentValue + 1;
    });
  }

  // Handle variant selection
  const variantOptions = document.querySelectorAll('.variant-option');
  const selectedPrice = document.getElementById('selected-price');
  const subscriptionPrice = document.getElementById('subscription-price');
  const productVariantId = document.getElementById('product-variant-id');

  variantOptions.forEach(option => {
    option.addEventListener('click', function() {
      // Remove active class from all options
      variantOptions.forEach(opt => {
        opt.classList.remove('border-primary', 'bg-primary/10');
        opt.classList.add('border-border');
      });
      
      // Add active class to clicked option
      this.classList.remove('border-border');
      this.classList.add('border-primary', 'bg-primary/10');
      
      // Update prices and variant ID
      const variantId = this.dataset.variantId;
      const variantPrice = this.dataset.variantPrice;
      
      if (selectedPrice) selectedPrice.textContent = variantPrice;
      if (subscriptionPrice) {
        // Calculate 10% discount for subscription
        const price = parseFloat(variantPrice.replace(/[^0-9.]/g, ''));
        const discountedPrice = (price * 0.9).toFixed(2);
        subscriptionPrice.textContent = `$${discountedPrice} every month`;
      }
      if (productVariantId) productVariantId.value = variantId;
    });
  });
});
</script>
